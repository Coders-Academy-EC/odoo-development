# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, IT-Projects LLC
# This file is distributed under the same license as the Odoo Development
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Odoo Development master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-06 17:13+0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

# 33f654d6588c4777a9777e4ecc43e868
#: ../../dev/py/one2one.rst:3
msgid "One2one field in odoo"
msgstr ""

# 54fa32f7590e4fee8c178e0a93854a9b
#: ../../dev/py/one2one.rst:5
msgid ""
"Odoo ORM doesn't support ``One2one`` fields, but you can do them "
"manually. In the example below we make one2one relationship between "
"models ``fleet.vehicle`` and ``account.asset.asset``."
msgstr ""

# f9d6e7ef7f3b4152a69880e6e33df154
#: ../../dev/py/one2one.rst:7
msgid ""
"In short, you set normal ``Mane2one`` field (``vehicle_id`` in the "
"example) in a one model (doesn't really matter which of the models you "
"choose) and corresponding ``One2many`` field (``asset_ids`` in the "
"example) in another model. Then we add virtural ``Many2one`` field "
"(``asset_id`` in the example) with attributes ``compute`` and "
"``inverse``."
msgstr ""

# 54ea2f04595f44efb8544d41546bb0d4
#: ../../dev/py/one2one.rst:40
msgid "TODO: replace ``@api.one`` to ``@api.multi``"
msgstr ""

