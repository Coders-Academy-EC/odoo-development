# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, IT-Projects LLC
# This file is distributed under the same license as the Odoo Development
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Odoo Development master\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-06 17:06+0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../git/checkout-pr.rst:3
msgid "Create branch from another's Pull Request"
msgstr ""

#: ../../git/checkout-pr.rst:10
msgid ""
"More information: https://help.github.com/articles/checking-out-pull-"
"requests-locally/"
msgstr ""

#: ../../git/checkout-pr.rst:13
msgid "Push updates to another's Pull Request"
msgstr ""

#: ../../git/checkout-pr.rst:15
msgid ""
"If you have access to edit PR files via github UI, you can push such "
"updates from console"
msgstr ""

#: ../../git/conflicts.rst:2
msgid "Conflict resolving"
msgstr ""

#: ../../git/conflicts.rst:4
msgid ""
"After making ``git merge`` or ``git cherry-pick`` there could be "
"conflicts, because some commits try to make changes on the same line. So,"
" you need to choose which change shall be use. It could be one variant, "
"both variants or new variant."
msgstr ""

#: ../../git/conflicts.rst:6
msgid "What to do if you got conflicts:"
msgstr ""

#: ../../git/conflicts.rst:8
msgid "Check status ::"
msgstr ""

#: ../../git/conflicts.rst:12
msgid "Resolve conflicts:"
msgstr ""

#: ../../git/conflicts.rst:14
msgid "either edit files manually:"
msgstr ""

#: ../../git/conflicts.rst:16
msgid "open file with conflicts"
msgstr ""

#: ../../git/conflicts.rst:17
msgid ""
"search for ``<<<`` or ``>>>`` and delete obsolete variant or make a mix "
"of both variants."
msgstr ""

#: ../../git/conflicts.rst:19
msgid "or use following commands, if you are sure which version should be kept ::"
msgstr ""

#: ../../git/conflicts.rst:25
msgid "Mark files as resolved via ``git add`` command"
msgstr ""

#: ../../git/conflicts.rst:26
msgid "Done. ::"
msgstr ""

#: ../../git/conflicts.rst:31
msgid "Deleted files"
msgstr ""

#: ../../git/conflicts.rst:32
msgid ""
"Sometimes, changes can be conflicted because files are not exist anymore "
"in *ours* version, but updated in *theirs* (or vice versa). In that case "
"execute the code below in order to ignore such changes:"
msgstr ""

#: ../../git/conflicts.rst:41
msgid "Notes"
msgstr ""

#: ../../git/conflicts.rst:43
msgid ""
"It's important, that on resolving conflict stage you should not make any "
"updates inside conflicting lines. You can only choose which lines should "
"be kept and which deleted. E.g. if you resolve conflicts due to porting "
"some update\\feature from one odoo version (e.g. 8.0) to another (e.g. "
"9.0), then such changes some time must be tuned to make update\\feature "
"work on target odoo version. But you have to make such tuning on a new "
"commit only. Make merging\\chery-picking commits be only about merging "
"and chery-picking, make porting commits separately."
msgstr ""

#: ../../git/conflicts.rst:44
msgid ""
"If you don't have conflicts, you do not need to make commit after cherry-"
"pick because it creates commit by its own."
msgstr ""

#: ../../git/files-relocation.rst:3
msgid "Files relocation"
msgstr ""

#: ../../git/files-relocation.rst:9
msgid "git format-patch"
msgstr ""

#: ../../git/files-relocation.rst:11
msgid ""
"This section is based on OCA's `instruction. <https://github.com/OCA"
"/maintainer-tools/wiki/Migration-to-version-10.0>`_"
msgstr ""

#: ../../git/files-relocation.rst:13
msgid "Used variabes:"
msgstr ""

#: ../../git/files-relocation.rst:15
msgid "``$REPO_PATH``, ``$REPO_NAME`` - source repository"
msgstr ""

#: ../../git/files-relocation.rst:16
msgid "``$MODULE`` - the name of the module you want to move"
msgstr ""

#: ../../git/files-relocation.rst:17
msgid "``$BRANCH`` - the branch of the $REPO with $MODULE"
msgstr ""

#: ../../git/files-relocation.rst:18
msgid "``$DEST_REPO_PATH``, ``$DEST_REPO_NAME`` - target repository"
msgstr ""

#: ../../git/files-relocation.rst:48
msgid "git filter-branch"
msgstr ""

#: ../../git/files-relocation.rst:50
msgid ""
"This section is based on http://gbayer.com/development/moving-files-from-"
"one-git-repository-to-another-preserving-history/"
msgstr ""

#: ../../git/files-relocation.rst:52
msgid "Goal:"
msgstr ""

#: ../../git/files-relocation.rst:53
msgid "Move directory 1 from Git repository A to Git repository B."
msgstr ""

#: ../../git/files-relocation.rst:55
msgid "Constraints:"
msgstr ""

#: ../../git/files-relocation.rst:55
msgid "Git repository A contains other directories that we don’t want to move."
msgstr ""

#: ../../git/files-relocation.rst:56
msgid ""
"We’d like to perserve the Git commit history for the directory we are "
"moving."
msgstr ""

#: ../../git/files-relocation.rst:61
msgid "Let's start"
msgstr ""

#: ../../git/files-relocation.rst:58
msgid "$REPO: the repository hosting the module (e.g. ``misc-addons``)"
msgstr ""

#: ../../git/files-relocation.rst:59
msgid ""
"$DEST_REPO: the repository you want to move the module to (e.g. ``access-"
"addons``)"
msgstr ""

#: ../../git/files-relocation.rst:60
msgid ""
"$MODULE: the name of the module you want to move (e.g. "
"``group_menu_no_access``)"
msgstr ""

#: ../../git/files-relocation.rst:61
msgid ""
"$BRANCH: the branch of the $REPO with $MODULE (source branch, e.g. "
"``8.0``)"
msgstr ""

#: ../../git/files-relocation.rst:63
msgid ""
"If you have installed git from official ubuntu 14.04 deb repository then "
"you should first update it. You can update git using this instruction "
":doc:`Update git<git_update>`"
msgstr ""

#: ../../git/files-relocation.rst:81
msgid ""
"After the last command you will have the module with all its commits in "
"your destination repo. Now you can push it on github etc. You can remove "
"``~/$REPO`` folder - no use of it now."
msgstr ""

#: ../../git/files-relocation.rst:84
msgid ""
"Cloning - this is required step. It is temporary directory. It will "
"removed all modules except the one that you want to move."
msgstr ""

#: ../../git/files-relocation.rst:86
msgid ""
"The following script may come in handy if you need to move several "
"modules. But be sure that you understand all its commands before using."
msgstr ""

#: ../../git/files-relocation.rst:137
msgid ""
"In order to use it you should  make the movemodule.sh file in your home "
"directory and put all lines above there and make this file executable. ::"
msgstr ""

#: ../../git/files-relocation.rst:144
msgid ""
"To do the moving of group_menu_no_access from addons-yelizariev to "
"access-addons with the movemodule.sh take the following steps."
msgstr ""

#: ../../git/files-relocation.rst:153
msgid ""
"This part is the same as moving without the script. But then I type only "
"one command instead of many in case of fully manual approach."
msgstr ""

#: ../../git/git_update.rst:3
msgid "Update Git"
msgstr ""

#: ../../git/git_update.rst:5
msgid ""
"Ubuntu 14.04 official deb repository has 1.9 version of Git. It is too "
"old and have to be updated."
msgstr ""

#: ../../git/git_update.rst:8
msgid "http://askubuntu.com/questions/579589/upgrade-git-version-on-ubuntu-14-04"
msgstr ""

#: ../../git/index.rst:2
msgid "Git and Github"
msgstr ""

#: ../../git/init.rst:3
msgid "Initial git & github configuration"
msgstr ""

#: ../../git/init.rst:6
msgid "ssh keys"
msgstr ""

#: ../../git/init.rst:7
msgid ""
"Configure github ssh keys: https://help.github.com/articles/connecting-"
"to-github-with-ssh/"
msgstr ""

#: ../../git/init.rst:10
msgid "gpg keys"
msgstr ""

#: ../../git/init.rst:12
msgid ""
"Generate gpg keys: https://help.github.com/articles/generating-a-new-gpg-"
"key/"
msgstr ""

#: ../../git/init.rst:13
msgid ""
"Add gpg key to github: https://help.github.com/articles/adding-a-new-gpg-"
"key-to-your-github-account/"
msgstr ""

#: ../../git/init.rst:14
msgid ""
"Tell to git which key to use https://help.github.com/articles/telling-"
"git-about-your-gpg-key/"
msgstr ""

#: ../../git/init.rst:15
msgid "Tell git to sign all commits:"
msgstr ""

#: ../../git/init.rst:21
msgid "Make gpg remember your passphrase"
msgstr ""

#: ../../git/init.rst:40
msgid "Make a backup if needed"
msgstr ""

#: ../../git/init.rst:52
msgid ""
"If you lost your key or forgot password, you need to create new one, but "
"don't remove old one from github, because otherwise all signed by old key"
" commits will become \"Unverified\""
msgstr ""

#: ../../git/init.rst:58
msgid "git email"
msgstr ""

#: ../../git/init.rst:60
msgid ""
"`Configure email in git <https://help.github.com/articles/setting-your-"
"email-in-git/>`_. Email must be the same as in github settings::"
msgstr ""

#: ../../git/init.rst:65
msgid "git editor"
msgstr ""

#: ../../git/init.rst:71
msgid "gitignore"
msgstr ""

#: ../../git/init.rst:73
msgid ""
"`Configure global gitignore <https://help.github.com/articles/ignoring-"
"files/#create-a-global-gitignore>`_"
msgstr ""

#: ../../git/init.rst:75
msgid "Possible content for ``~/.gitignore_global``: ::"
msgstr ""

#: ../../git/multi-pull-request.rst:2
msgid "Multi Pull Request"
msgstr ""

#: ../../git/multi-pull-request.rst:5
msgid "Find last merged point"
msgstr ""

#: ../../git/multi-pull-request.rst:7
msgid ""
"To find last commit ``upstream/8.0`` and ``upstream/9.0`` were merged, "
"use following commands"
msgstr ""

#: ../../git/porting.rst:3
msgid "Porting"
msgstr ""

#: ../../git/porting.rst:5
msgid ""
"If you add some feature to one branch and need to add it to anoher "
"branch, then you have to make *port*."
msgstr ""

#: ../../git/porting.rst:7
msgid "See also:"
msgstr ""

#: ../../git/porting.rst:9
msgid ":doc:`Conflicts resolving <conflicts>`"
msgstr ""

#: ../../git/porting.rst:12
msgid "Forward-port"
msgstr ""

#: ../../git/porting.rst:14
msgid ""
"It's the simplest case. You merge commits from older branch (e.g. 8.0) to"
" newer branch (e.g. 9.0) ::"
msgstr ""

#: ../../git/porting.rst:23
msgid ""
"After ``git merge`` you probably need to make some minor changes. In that"
" case just add new commits to newer branch ::"
msgstr ""

#: ../../git/porting.rst:30
msgid "Back-port"
msgstr ""

#: ../../git/porting.rst:33
msgid ""
"If you need to port new feature from newer branch (e.g. 9.0) to older one"
" (e.g. 8.0), then you have to make *back-port*."
msgstr ""

#: ../../git/porting.rst:35
msgid ""
"The problem here is that newer branch has commits which should be applied"
" for newer branch only. That is you cannot just make ``git merge 9.0``, "
"because it brings 9.0-only commits to 8.0 branch. Possible solutions here"
" are:"
msgstr ""

#: ../../git/porting.rst:38
msgid "git cherry-pick"
msgstr ""

#: ../../git/porting.rst:41
msgid "Apply commits from newer branch (e.g. 9.0) to older branch (e.g. 8.0) ::"
msgstr ""

#: ../../git/porting.rst:54
msgid ""
"Also possible to pick the commit from any remote repository. Add this "
"repository to your remotes. Do fetch from it. And then cherry-pick."
msgstr ""

#: ../../git/porting.rst:57
msgid "cherry-pick range of commits"
msgstr ""

#: ../../git/porting.rst:59
msgid ""
"The command ``git cherry-pick A..B`` applies commits betwwen A and B, but"
" without A (A must be older than B). To apply inclusive range of commits "
"use format as follows::"
msgstr ""

#: ../../git/porting.rst:63
msgid ""
"For example, to backport this PR https://github.com/it-projects-llc/odoo-"
"saas-tools/pull/286/commits , use command::"
msgstr ""

#: ../../git/remote.rst:2
msgid "Check remote bundings"
msgstr ""

#: ../../git/remote.rst:4
msgid "Check current branch::"
msgstr ""

#: ../../git/remote.rst:8
msgid "Local branch must be bind to origin. If its no do next::"
msgstr ""

#: ../../git/reset.rst:2
msgid "Cancel lame commit"
msgstr ""

#: ../../git/reset.rst:4
msgid "Imagine you make lame commit. Now to repair things do next:"
msgstr ""

#: ../../git/reset.rst:6
msgid "git reset HEAD~1 --soft"
msgstr ""

#: ../../git/reset.rst:7 ../../git/reset.rst:14 ../../git/reset.rst:20
msgid "git status"
msgstr ""

#: ../../git/reset.rst:9 ../../git/reset.rst:16
msgid ""
"You will see: Your branch is behind 'origin/8.0' by 1 commit, and can be "
"fast-forwarded. (use \"git pull\" to update your local branch)"
msgstr ""

#: ../../git/reset.rst:12
msgid "git add // Add here changed (fixed) files"
msgstr ""

#: ../../git/reset.rst:13
msgid "git diff --cached  //make sure everything is ok."
msgstr ""

#: ../../git/reset.rst:19
msgid "git commit -m'I fixed my mistakes'"
msgstr ""

#: ../../git/reset.rst:22
msgid ""
"You will see: Your branch and 'origin/8.0' have diverged, and have 1 and "
"1 different commit each, respectively. (use \"git pull\" to merge the "
"remote branch into yours)"
msgstr ""

#: ../../git/reset.rst:26
msgid "Now finaly force is with you:"
msgstr ""

#: ../../git/reset.rst:28
msgid "git push origin 8.0 -f"
msgstr ""

#: ../../git/squash.rst:3
msgid "Squash commits into one"
msgstr ""

#: ../../git/squash.rst:6
msgid "Backup"
msgstr ""

#: ../../git/squash.rst:8
msgid "Before making a squash consider to \"backup\" your commits."
msgstr ""

#: ../../git/squash.rst:10
msgid "Local backup:"
msgstr ""

#: ../../git/squash.rst:16
msgid "Remote backup"
msgstr ""

#: ../../git/squash.rst:22
msgid "To restore original state you can use following command:"
msgstr ""

#: ../../git/squash.rst:36
msgid "``git commit --amend``"
msgstr ""

#: ../../git/squash.rst:38
msgid "Instead of creating new commit, adds updates to the latest commit."
msgstr ""

#: ../../git/squash.rst:41
msgid "``git rebase -i``"
msgstr ""

#: ../../git/squash.rst:43
msgid "Interactive squashing"
msgstr ""

#: ../../git/squash.rst:51
msgid ""
"Then edit opened file and keep ``pick`` for the first commit and and "
"replace ``pick`` with ``squash`` for the rest ones. E.g."
msgstr ""

#: ../../git/squash.rst:53
msgid "Origin::"
msgstr ""

#: ../../git/squash.rst:57
msgid "Edited::"
msgstr ""

#: ../../git/squash.rst:61
msgid "If you remove a line here THAT COMMIT WILL BE LOST."
msgstr ""

#: ../../git/squash.rst:64
msgid "Push"
msgstr ""

#: ../../git/stash.rst:2
msgid "Git stash"
msgstr ""

#: ../../git/stash.rst:4
msgid "book: https://git-scm.com/book/no-nb/v1/Git-Tools-Stashing"
msgstr ""

#: ../../git/stash.rst:5
msgid "man: https://git-scm.com/docs/git-stash"
msgstr ""

#: ../../git/utils.rst:2
msgid "Pull request from console"
msgstr ""

#: ../../git/utils.rst:4
msgid ""
"Yes it possible! Try this manual: https://github.com/github/hub Than in "
"console::"
msgstr ""

#: ../../git/utils.rst:9
msgid "And pull request::"
msgstr ""

#: ../../git/utils.rst:13
msgid ""
"Nessesary to add some header for pull request. Save it. If everything is "
"ok you will got link to your pull request."
msgstr ""

